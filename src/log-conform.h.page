/**
# The log-conformation method for some constitutive models

## Introduction

The numerical resolution of viscoelastic fluid problems often faces the
[High-Weissenberg Number
Problem](http://www.ma.huji.ac.il/~razk/iWeb/My_Site/Research_files/Visco1.pdf). 
This is a numerical instability appearing when strongly elastic flows
create regions of high stress and fine features. This instability
poses practical limits to the values of the relaxation time of the
viscoelastic fluid, $\lambda$.  [Fattal \& Kupferman (2004,
2005)](#fattal2004) identified the exponential nature of the solution
as the origin of the instability. They proposed to use the logarithm
of the conformation tensor $\Psi = \log \, \mathbf{A}$ rather than the
viscoelastic stress tensor to circumvent the instability.

## Equations

The constitutive equation for the log of the conformation tensor is
$$ 
D_t \Psi = rhs =  (\Omega \cdot \Psi -\Psi \cdot \Omega) + 2 \mathbf{B} +
\frac{e^{-\Psi} \mathbf{f}_r (e^{\Psi})}{\lambda}
$$
where $\Omega$ and $\mathbf{B}$ are tensors that result from the
decomposition of the transpose of the tensor gradient of the
velocity
$$ 
(\nabla \mathbf{u})^T = \Omega_1 + \mathbf{B} + N
\mathbf{A}^{-1} 
$$ 
and $\mathbf{f}_r (\mathbf{A})$ is the relaxation function that
depends on the constitutive model adopted.

The antisymmetric tensor $\Omega$ requires only the memory of a scalar
in 2D since,
$$ 
\Omega = \left( 
\begin{array}{cc}
0 & \Omega_{12} \\
-\Omega_{12} & 0
\end{array} 
\right)
$$
The log-conformation tensor, $\Psi$, is related to the viscoelastic
(polymeric) stress tensor $\mathbf{S}$, by the strain function $\mathbf{f}_s (\mathbf{A})$,
$$ 
\Psi = \log \, \mathbf{A} \quad \mbox{and} \quad \mathbf{S} =
\frac{\mu_p}{\lambda} \mathbf{f}_s (\mathbf{A})
$$

[Comminal et al. (2015)](#comminal2015) gathered the functions $\mathbf{f}_s
(\mathbf{A})$ and $\mathbf{f}_r (\mathbf{A})$ for different
constitutive models. In the present library three
different (but related) constitutive models are implemented

$$
\begin{array}{lcc}
\mbox{model} & \mathbf{f}_s (\mathbf{A}) & \mathbf{f}_r (\mathbf{A}) \\ 
\mbox{Oldroyd-B} & \mathbf{A} -\mathbf{I} & \mathbf{A} -\mathbf{I} \\
\mbox{FENE-P} & \frac{\mathbf{A}}{1-Tr(\mathbf{A})/L^2} -\mathbf{I} & 
\frac{\mathbf{A}}{1-Tr(\mathbf{A})/L^2} -\mathbf{I} \\
\mbox{FENE-CR} & \frac{\mathbf{A}-\mathbf{I}}{1-Tr(\mathbf{A})/L^2} & 
\frac{\mathbf{A}-\mathbf{I}}{1-Tr(\mathbf{A})/L^2}  \\ \\
\end{array}
$$

where $Tr$ denotes the trace of the tensor and $L$ is an additional
property of the viscoelastic fluid.

The divergence of $\mathbf{S}$ has to be added later to the momentum
equation as a source. Note that an Oldroyd-B viscoelastic fluid also
has a solvent part whose stresses follow a Newtonian behaviour. 

We will use the Bell--Collela--Glaz scheme to advect the log-conformation 
tensor $\Psi$. */

#include "bcg.h"

/**
## Parameters

Constitutive models other than Oldroyd-B are defined through the
two functions $\mathbf{f}_s (\mathbf{A})$ and $\mathbf{f}_r
(\mathbf{A})$. */

void (* f_s) (double, double *, double *) = NULL;
void (* f_r) (double, double *, double *) = NULL;

/**
A fundamental viscoelastic fluid property is the retardation or
relaxation time, $\lambda$. Additionally, the viscosity of the
viscoelastic fluid is decomposed into the polymeric contribution,
$\mu_p$, and the solvent contribution, $\mu_s$. The solvent behaves as
a Newtonian fluid, therefore, $\mu_s$ is not defined here since it is
already defined in the [Navier-Stokes
solver](navier-stokes/centered.h). */

(const) scalar lambda = unity;
(const) scalar mup = unity;

/**
## Variables

The main variable will be the stress tensor $\mathbf{S}$. The trace of
the conformation tensor, $\mathbf{A}$, is often necessary for
constitutive viscoelastic models other than Oldroyd-B.  */

symmetric tensor S[];
#if AXI
scalar Sqq[];
#endif
(const) scalar trA = zeroc;

event defaults (i = 0) {
  if (is_constant (a.x))
    a = new face vector;
  if (f_s || f_r)
    trA = new scalar;

  foreach() {
    foreach_dimension()
      S.x.x[] = 0.;
    S.x.y[] = 0.;
#if AXI
    Sqq[] = 0;
#endif
  }

  /**
  ## Boundary conditions

  By default we set a zero Neumann boundary condition for all
  the components except if the bottom is an axis of symmetry. */

  for (scalar s in {S}) {
    s.v.x.i = -1; // just a scalar, not the component of a vector
    foreach_dimension() {
      s[left] = neumann(0);
      s[right] = neumann(0);
    }
  }
#if AXI
  scalar s = S.x.y;
  s[bottom] = dirichlet (0.);  
#endif  
}

event init (i = 0) {
#if AXI
  boundary((scalar *){S, Sqq});
#else
  boundary((scalar *){S});
#endif
}

/**
## Numerical Scheme 

The first step is to implement a routine to calculate the eigenvalues
and eigenvectors of the conformation tensor $\mathbf{A}$.

These structs ressemble Basilisk vectors and tensors but are just
arrays not related to the grid. */

typedef struct { double x, y;}   pseudo_v;
typedef struct { pseudo_v x, y;} pseudo_t;

static void diagonalization_2D (pseudo_v * eval, pseudo_t * evec, pseudo_t * A)
{
  /**
  The eigenvalues are saved in vector *eval* computed from the
  trace and the determinant of the symmetric conformation tensor
  $\mathbf{A}$. */

  if (sq(A->x.y) < 1e-15) {
    evec->x.x = evec->y.y = 1.;
    evec->y.x = evec->x.y = 0.;
    eval->x = A->x.x; eval->y = A->y.y;
    return;
  }

  double T = A->x.x + A->y.y; // Trace of the tensor
  double D = A->x.x*A->y.y - sq(A->x.y); // Determinant

  /**
  The eigenvectors, $\mathbf{v}_i$ are saved by columns in tensor
  $\mathbf{R} = (\mathbf{v}_1|\mathbf{v}_2)$. */

  evec->x.x = evec->x.y = A->x.y;
  evec->y.x = evec->y.y = -A->x.x;
  double s = 1.;
  for (int i = 0; i < dimension; i++) {
    double * ev = (double *) eval;
    ev[i] = T/2 + s*sqrt(sq(T)/4. - D);
    s *= -1;
    double * evecx = (double *) &evec->x;
    double * evecy = (double *) &evec->y;
    evecy[i] += ev[i];
    double mod = sqrt(sq(evecx[i]) + sq(evecy[i]));
    evecx[i] /= mod;
    evecy[i] /= mod;
  }
}

/**
The stress tensor depends on previous instants and has to be
integrated in time. In the log-conformation scheme the advection of
the stress tensor is circumvented, instead the conformation tensor,
$\mathbf{A}$ (or more precisely the related variable $\Psi$) is
advanced in time.

In what follows we will adopt a scheme similar to that of [Hao \& Pan
(2007)](#hao2007). They use a split scheme, solving successively

a) the advection term:
$$ 
\partial_t \Psi + \nabla \cdot (\Psi \mathbf{u}) = 0
$$
b) the upper convective term:
$$
\partial_t \Psi = 2 \mathbf{B} + (\Omega \cdot \Psi -\Psi \cdot \Omega)
$$
c) the model term (but set in terms of the conformation 
tensor $\mathbf{A}$). In an Oldroyd-B viscoelastic fluid, the model is
$$ 
\partial_t \mathbf{A} = -\frac{\mathbf{f}_r (\mathbf{A})}{\lambda}
$$
*/

event tracer_advection (i++)
{
  symmetric tensor Psi[], rhs[];
#if AXI
  scalar Psiqq[];
#endif

  // Boundary conditions for Psi
  for (scalar s in {Psi}) {
    s.v.x.i = -1; // just a scalar, not the component of a vector
    foreach_dimension() {
      s[left] = neumann(0);
      s[right] = neumann(0);
    }
  }
  
  /**
  ### Computation of $\Psi = \log \mathbf{A}$ and $rhs = 2 \mathbf{B} + (\Omega \cdot \Psi -\Psi \cdot \Omega)$ */

  foreach() {
    if (lambda[] == 0.) {
      foreach_dimension()
	Psi.x.x[] = rhs.x.x[] = 0.;
      Psi.x.y[] = rhs.x.y[] = 0.;
#if AXI
      Psiqq[] = 0.;
#endif
    }
    else { // lambda[] != 0.

      /**
      We assume that the stress tensor $\mathbf{S}$ depends on the
      conformation tensor $\mathbf{A}$ as follows
      $$
      \mathbf{S} = \frac{\mu_p}{\lambda} f_s (\mathbf{A}) = 
      \frac{\mu_p}{\lambda} \eta (\nu \mathbf{A} - I)
      $$
      In most of the viscoelastic models,  $\nu$ and $\eta$ are 
      nonlinear parameters that depend on the trace of the conformation tensor,
      $\mathbf{A}$.*/

      double eta = 1., nu = 1.;
      if (f_s)
	f_s (trA[], &nu, &eta);

      double fa = (mup[] != 0 ? lambda[]/(mup[]*eta) : 0.);

      pseudo_t A;
      A.x.y = fa*S.x.y[]/nu;
      foreach_dimension()
	A.x.x = (fa*S.x.x[] + 1.)/nu;

      /**
      In the axisymmetric case, $\Psi_{\theta \theta} = \log A_{\theta
      \theta}$. Therefore $\Psi_{\theta \theta} = \log [ ( 1 + fa 
      S_{\theta \theta})/\nu]$. */

#if AXI
      double Aqq = (1. + fa*Sqq[])/nu;
      Psiqq[] = log (Aqq); 
#endif

      /**
      The conformation tensor is diagonalized through the
      eigenvector tensor $\mathbf{R}$ and the eigenvalues diagonal
      tensor, $\Lambda$. */

      pseudo_v eval;
      pseudo_t R;
      diagonalization_2D (&eval, &R, &A);
      
      /**
      $\Psi = \log \mathbf{A}$ is easily obtained after diagonalization, 
      $\Psi = R \cdot \log(\Lambda) \cdot R^T$. */
      
      Psi.x.y[] = R.x.x*R.y.x*log(eval.x) + R.y.y*R.x.y*log(eval.y);
      foreach_dimension()
	Psi.x.x[] = sq(R.x.x)*log(eval.x) + sq(R.x.y)*log(eval.y);

      /**
      The diagonalization will be applied to the velocity gradient
      $(\nabla u)^T$ to obtain the antisymmetric tensor $\Omega$ and
      the traceless, symmetric tensor, $\mathbf{B}$. If the conformation
      tensor is $\mathbf{I}$, $\Omega = 0$ and $\mathbf{B}= \mathbf{D}$.  */

      pseudo_t B;
      double OM = 0.;
      if (eval.x - eval.y <= 1e-20) {
	B.x.y = (u.y[1,0] - u.y[-1,0] +
		 u.x[0,1] - u.x[0,-1])/(4.*Delta); 
	foreach_dimension() 
	  B.x.x = (u.x[1,0] - u.x[-1,0])/(2.*Delta);
      }
      else {
	pseudo_t M;
	foreach_dimension() {
	  M.x.x = (sq(R.x.x)*(u.x[1] - u.x[-1]) +
		   sq(R.y.x)*(u.y[0,1] - u.y[0,-1]) +
		   R.x.x*R.y.x*(u.x[0,1] - u.x[0,-1] + 
				u.y[1] - u.y[-1]))/(2.*Delta);
	  M.x.y = (R.x.x*R.x.y*(u.x[1] - u.x[-1]) + 
		   R.x.y*R.y.x*(u.y[1] - u.y[-1]) +
		   R.x.x*R.y.y*(u.x[0,1] - u.x[0,-1]) +
		   R.y.x*R.y.y*(u.y[0,1] - u.y[0,-1]))/(2.*Delta);
	}
	double omega = (eval.y*M.x.y + eval.x*M.y.x)/(eval.y - eval.x);
	OM = (R.x.x*R.y.y - R.x.y*R.y.x)*omega;
	
	B.x.y = M.x.x*R.x.x*R.y.x + M.y.y*R.y.y*R.x.y;
	foreach_dimension()
	  B.x.x = M.x.x*sq(R.x.x)+M.y.y*sq(R.x.y);	
      }

      /**
      Now we have all the elements to compute the right side of the
      advancing equation for $\Psi$. */

      double s = - Psi.x.y[];
      foreach_dimension() {
	s *= -1;
	rhs.x.x[] = 2.*(B.x.x + s*OM);
      }
      rhs.x.y[] = 2.*B.x.y + OM*(Psi.y.y[] - Psi.x.x[]);
    }
  }
  
  /**
  ### Advection of $\Psi$
  
  We proceed with step (a), the advection of the log of the
  conformation tensor $\Psi$, but first we apply boundary
  conditions. */

#if AXI
  boundary ({Psi.x.x, Psi.x.y, Psi.y.y, Psiqq});
  advection ({Psi.x.x, Psi.x.y, Psi.y.y, Psiqq}, uf, dt);
#else
  boundary ({Psi.x.x, Psi.x.y, Psi.y.y});
  advection ({Psi.x.x, Psi.x.y, Psi.y.y}, uf, dt);
#endif

  /**
  ### Upper convective term and model term */
  
  foreach() {
    if (lambda[] < 1e-6) {

      /**
      If $\lambda = 0$ the stress tensor for the polymeric part
      reduces to that of a Newtonian fluid $\mathbf{S} = 2 \mu_p
      \mathbf{D}$ with $\mathbf{D}$ the rate-of-strain
      tensor. Note that $\mathbf{S}$ is in this case independent of
      time. */

      foreach_dimension()
	S.x.x[] = mup[]*(u.x[1,0] - u.x[-1,0])/Delta; // 2*mu*dxu;
      S.x.y[] = mup[]*(u.y[1,0] - u.y[-1,0] +
                       u.x[0,1] - u.x[0,-1])/(2.*Delta); // mu*(dxv+dyu)
#if AXI
      Sqq[] = 2.*mup[]*u.y[]/y;
#endif
    }
    else { // lambda >= 1e-6

      /**
      If $\lambda \neq 0$ we proceed with step (b). The upper
      convection of the log of the conformation tensor, $\Psi$. */

      foreach_dimension()
        Psi.x.x[] += rhs.x.x[]*dt;
      Psi.x.y[] += rhs.x.y[]*dt;

      /**
      In the axisymmetric case, the governing equation for $\Psi_{\theta
      \theta}$ only involves that component, 
      $$ 
      \Psi_{\theta \theta}|_t - 2 L_{\theta \theta} = 
      \frac{\mathbf{f}_r(e^{-\Psi_{\theta \theta}})}{\lambda} 
      $$
      with $L_{\theta \theta} = u_y/y$. Therefore step (b) for
      $\Psi_{\theta \theta}$ is */

#if AXI
      Psiqq[] += dt*2.*u.y[]/y;
#endif
      
      /**
      It is time to undo the log-conformation, again by
      diagonalization, to recover the conformation tensor $\mathbf{A}$
      and to perform step (c).*/

      pseudo_t A = {{Psi.x.x[], Psi.x.y[]}, {Psi.y.x[], Psi.y.y[]}}, R;
      pseudo_v eval;
      diagonalization_2D (&eval, &R, &A);
      eval.x = exp(eval.x), eval.y = exp(eval.y);
      
      A.x.y = R.x.x*R.y.x*eval.x + R.y.y*R.x.y*eval.y;
      foreach_dimension()
	A.x.x = sq(R.x.x)*eval.x + sq(R.x.y)*eval.y;
#if AXI
      double Aqq = exp(Psiqq[]);
#endif

      /**
      We perform now step (c) by integrating 
      $\mathbf{A}_t = -\mathbf{f}_r (\mathbf{A})/\lambda$ to obtain
      $\mathbf{A}^{n+1}$. This step is analytic,
      $$
      \int_{t^n}^{t^{n+1}}\frac{d \mathbf{A}}{\mathbf{I}- \nu \mathbf{A}} = 
      \frac{\eta \, \Delta t}{\lambda}
      $$
      */

      double eta = 1., nu = 1.;
      if (f_r) {
#if 0 // Set to one if the midstep trace is to be used.
	scalar t = trA;
	t[] = A.x.x + A.y.y;
#if AXI
	t[] += Aqq;
#endif
#endif
	f_r (trA[], &nu, &eta);
      }

      double fa = exp(-nu*eta*dt/lambda[]);

#if AXI
      Aqq = (1. - fa)/nu + fa*exp(Psiqq[]);
      Psiqq[] = log (Aqq);
#endif

      A.x.y *= fa;
      foreach_dimension()
	A.x.x = (1. - fa)/nu + A.x.x*fa;

      /**
      The trace at time $n+1$ is also needed for some models. */
      
      if (f_s || f_r) {
	scalar t = trA;
	t[] = A.x.x + A.y.y;
#if AXI
	t[] += Aqq;
#endif
      }

      /**
      Then the stress tensor $\mathbf{S}^{n+1}$ is computed from
      $\mathbf{A}^{n+1}$ according to the constitutive model,
      $\mathbf{f}_s(\mathbf{A})$.  */

      nu = 1; eta = 1.;
      if (f_s)
	f_s (trA[], &nu, &eta);

      fa = mup[]/lambda[]*eta;
      
      S.x.y[] = fa*nu*A.x.y;
#if AXI
      Sqq[] = fa*(nu*Aqq - 1);
#endif
      foreach_dimension()
	S.x.x[] = fa*(nu*A.x.x - 1);
    }
  }

#if AXI
  boundary((scalar *){S, Sqq});
#else
  boundary((scalar *){S});
#endif
}

/**
### Divergence of the viscoelastic stress tensor

The viscoelastic stress tensor $\mathbf{S}$ is defined at cell centers
while the corresponding force (acceleration) will be defined at cell
faces. Two terms contribute to each component of the momentum
equation. For example the $x$-component in Cartesian coordinates has
the following terms: $\partial_x \mathbf{S}_{xx} + \partial_y
\mathbf{S}_{xy}$. The first term is easy to compute since it can be
calculated directly from center values of cells sharing the face. The
other one is harder. It will be computed from vertex values. The
vertex values are obtained by averaging centered values.  Note that as
a result of the vertex averaging cells `[]` and `[-1,0]` are not
involved in the computation of shear. */

event acceleration (i++)
{
  face vector av = a;
  foreach_face()
    if (fm.x[] > 1e-20) { // FIXME: why not zero?
      double shear = (S.x.y[0,1]*cm[0,1] + S.x.y[-1,1]*cm[-1,1] -
		      S.x.y[0,-1]*cm[0,-1] - S.x.y[-1,-1]*cm[-1,-1])/4.;
      av.x[] += (shear + cm[]*S.x.x[] - cm[-1]*S.x.x[-1])*
	alpha.x[]/(sq(fm.x[])*Delta);
    }
#if AXI
  foreach_face(y)
    if (y > 0.)
      av.y[] -= (Sqq[] + Sqq[0,-1])*alpha.y[]/sq(y)/2.;
#endif
}

/**
## References

~~~bib
@article{fattal2004,
  title={Constitutive laws for the matrix-logarithm of the conformation tensor},
  author={Fattal, Raanan and Kupferman, Raz},
  journal={Journal of Non-Newtonian Fluid Mechanics},
  volume={123},
  number={2-3},
  pages={281--285},
  year={2004},
  publisher={Elsevier}
}

@article{fattal2005,
  title={Time-dependent simulation of viscoelastic flows at 
         high {W}eissenberg number using the log-conformation representation},
  author={Fattal, Raanan and Kupferman, Raz},
  journal={Journal of Non-Newtonian Fluid Mechanics},
  volume={126},
  number={1},
  pages={23--37},
  year={2005},
  publisher={Elsevier}
}

@article{hao2007,
  title={Simulation for high {W}eissenberg number: viscoelastic 
         flow by a finite element method},
  author={Hao, Jian and Pan, Tsorng-Whay},
  journal={Applied mathematics letters},
  volume={20},
  number={9},
  pages={988--993},
  year={2007},
  publisher={Elsevier}
}

@article{comminal2015,
  title={Robust simulations of viscoelastic flows at high {W}eissenberg 
         numbers with the streamfunction/log-conformation formulation},
  author={Comminal, Rapha{\"e}l and Spangenberg, Jon and Hattel, Jesper Henri},
  journal={Journal of Non-Newtonian Fluid Mechanics},
  volume={223},
  pages={37--61},
  year={2015},
  publisher={Elsevier}
}
~~~

## See also

* [Functions $f_s$ and $f_r$ for the FENE-P model](fene_p.h)
*/
