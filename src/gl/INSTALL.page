Two options are possible: off-screen rendering or using
graphics-acceleration hardware.

# Using off-screen rendering

[OSMesa](https://www.mesa3d.org/osmesa.html) is a software-only
implementation of OpenGL i.e. it does not require any graphics
hardware and is thus suitable for installation on large-scale clusters
which usually do not have graphical capabilities. Both libGLU and
libOSMesa are required.

## Debian-based systems (Debian, Ubuntu, etc.)

~~~bash
sudo apt-get install libglu1-mesa-dev libosmesa6-dev
~~~

to install the required system libraries (and their "development"
requirements i.e. header files etc.), then do:

~~~bash
cd $BASILISK/gl
make libglutils.a libfb_osmesa.a
~~~

to compile the libraries provided by Basilisk.

## Mac OSX

You first need to install [MacPorts](https://www.macports.org), then
do:

~~~bash
sudo port install mesa
~~~

to install the required system libraries, then do:

~~~bash
cd $BASILISK/gl
CFLAGS=-I/opt/local/include make libglutils.a libfb_osmesa.a
~~~

to compile the libraries provided by Basilisk.

# Using graphics-acceleration hardware

If a graphics card is installed on the system, this can be used to
provide faster OpenGL graphics. libGLU, libGLEW, libGL and libX11 are
required.

## Debian-based systems (Debian, Ubuntu, etc.)

Use

~~~bash
sudo apt-get install libglu1-mesa-dev libglew-dev libgl1-mesa-dev
~~~

to install the required system libraries (and their "development"
requirements i.e. header files etc.), then do:

~~~bash
cd $BASILISK/gl
make libglutils.a libfb_glx.a
~~~

to compile the libraries provided by Basilisk.

# Standalone installation

The libraries are independent from Basilisk and can be installed
separately. This is useful for example when [running on
supercomputers](/src/Tips#running-on-supercomputers) which do not have
Basilisk installed.

This can be done easily using something like:

On the local system:

~~~bash
cd $BASILISK
tar czvf gl.tgz gl
scp gl.tgz login@supercomputer.org:
~~~

On the remote machine:

~~~bash
tar xzvf gl.tgz
cd gl
make clean
~~~

and then follow the [installation
instructions](#using-off-screen-rendering) above.

## Installing OSMesa/GLU from source

If pre-compiled packages for OSMesa/GLU are not available (or broken)
on the system you want to use, it is reasonably simple to install
these libraries directly from source. Something like the following
recipe should work on most UNIX systems:

~~~bash
wget mesa.freedesktop.org/archive/mesa-17.2.4.tar.gz
tar xzvf mesa-17.2.4.tar.gz
cd mesa-17.2.4
./configure --prefix=/home/popinet/local --enable-osmesa \
			--with-gallium-drivers=swrast                \
            --disable-driglx-direct --disable-dri --disable-gbm --disable-egl
make
make install

wget ftp://ftp.freedesktop.org/pub/mesa/glu/glu-9.0.0.tar.gz
tar xzvf glu-9.0.0.tar.gz
cd glu-9.0.0
make
make install
~~~

see also:

* [OSMesa](https://mesa.freedesktop.org/osmesa.html)

## OSMesa/GLU on Occigen

If you have an account on
[Occigen](https://www.cines.fr/calcul/materiels/occigen/) you can
access my local installation of gl/OSMesa/GLU using something like:

~~~bash
module purge
module load openmpi
module load intel
module load llvm # no idea why this is necessary

NAME=view
GL=/home/popinet/local
mpicc -Wall -std=c99 -O2 _$NAME.c -o $NAME \
    -I$GL -L$GL/gl -L$GL/lib \
    -lglutils -lfb_osmesa -lOSMesa -lGLU -lm
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$GL/lib
srun --mpi=pmi2 -K1 --resv-ports -n $SLURM_NTASKS ./$NAME \
     2> log-$SLURM_NTASKS > out-$SLURM_NTASKS
~~~

Note that the *mesa* package provided by the system, which includes a
version of the OSMesa library, seems to be broken.
