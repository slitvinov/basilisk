/**
# Oldroyd-B lid driven cavity

The viscoeleatic fluid is confined in unit square cavity of size unity, 
bounded by walls except on the top side where a time-dependent tangential 
velocity is imposed.
$$
u_{top} = 8 \left[ 1 + \tanh \left(t - \frac{1}{2} \right) \right] x^2 (1-x)^2 
$$
This test case has been proposed by Fattal \& Kupferman (2005).

We assume that the solvent and polymer viscosity are equal ($\beta =
0.5$) and the Weissenberg number $Wi$ is equal to 1. */


#define DT_MAX (5e-4) 
#define MU0 1. // Total viscoelastic viscosity 
#define BETA (0.5) // Ratio of the solvent viscosity to the total viscosity
#define MUP ((1.-BETA)*MU0) // Polymer viscosity
#define MUS (BETA*MU0) // Solvent viscosity 
#define WI 1. // Weissberger number
#define uwall(x,t) (8.*(1.+tanh(8.*(t-0.5)))*sq(x)*sq(1.-x))

#include "grid/multigrid.h"
#include "navier-stokes/centered.h"
#include "log_conform_1.h"

scalar r[], q[];

int main()
{
  DT = DT_MAX;
  N = 64;
  init_grid (N);
  const scalar lamb[] = WI;
  lambda = lamb;
  const scalar mupc[] = MUP;
  mup = mupc;
  const face vector mus[] = {MUS,MUS};
  mu = mus;
  stokes = true ;
  run();
}

u.t[top] = dirichlet(uwall(x,t));
u.n[top] = dirichlet(0);
u.t[bottom] = dirichlet(0);
u.n[bottom] = dirichlet(0);
u.t[left] = dirichlet(0);
u.n[left] = dirichlet(0);
u.t[right] = dirichlet(0);
u.n[right] = dirichlet(0);

event init (i = 0) 
{
  vector v = S.x;
  v.n[left] = dirichlet (0.);
  v.n[right] = dirichlet (0.);
  v = S.y;
  v.n[bottom] = dirichlet (0.);
	
  foreach()
    u.x[] = 0.;
  boundary ((scalar *){u});
}

/**
Do not be silly! Borrow from other's work! The energy() function is in
*test/lid.c* */

static double energy()
{
  double se = 0.;
  if (u.x.face)
    foreach(reduction(+:se))
      se += (sq(u.x[] + u.x[1,0]) + sq(u.y[] + u.y[0,1]))/8.*sq(Delta);
  else // centered
    foreach(reduction(+:se))
      se += (sq(u.x[]) + sq(u.y[]))/2.*sq(Delta);
  return se;
}

event kinetic_energy (t += 0.01) 
{
  static FILE * fp = fopen ("kinetic", "w");
  fprintf (fp, "%g %g\n", t, energy());
  fflush(fp);
}

event profile (t = 8.)
{
  FILE * fpp = fopen("yprof", "w");
  for (double y = 0; y <= 1.; y += 0.01)
    fprintf (fpp, "%g %g \n", y, interpolate (u.x, 0.5, y));
  fclose (fpp);
  
  fpp = fopen("xprof", "w");
  for (double x = 0; x <= 1; x += 0.01)
    fprintf (fpp, "%g %g\n", x, interpolate (u.y, x, 0.75));
  fclose (fpp);
}

#if 0
event gfsview (i += 10) {
  printf("instant = %g\n", t);
  static FILE * fpg = popen("gfsview2D ","w");
  output_gfs (fpg, t= t);
}
#endif

/**
~~~gnuplot Time evolution of the total kinetic energy
set xlabel 't'
set ylabel 'kinetic energy'
plot 'lid_cavity.kinetic' w l t 'Fattal and Kupferman (2005)',  'kinetic' w l t 'Basilisk'
~~~
~~~gnuplot Velocity profile u_x for x=0.5
set ylabel 'y'
set xlabel 'u_x'
plot 'lid_cavity.ux' w l t 'Fattal and Kupferman (2005)',  'yprof' u 2:1 t 'Basilisk'
~~~
~~~gnuplot Velocity profile u_y for y=0.75
set xlabel 'x'
set ylabel 'u_y'
plot 'lid_cavity.uy' w l t 'Fattal and Kupferman (2005)','xprof' t 'Basilisk'
~~~
*/
